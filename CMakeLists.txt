cmake_minimum_required(VERSION 3.5)

project(chatgpt-sidebar VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include_directories(${CMAKE_SOURCE_DIR})
if(APPLE)
    # 查找Carbon库
    find_library(CARBON_LIBRARY Carbon)
    find_library(ApplicationServices_LIBRARY ApplicationServices)
endif()
find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)
# 查找OpenSSL库
# 指定 OpenSSL 的安装路径
set(OPENSSL_ROOT_DIR "D:/work/vcpkg/installed/x64-windows")
# 指定 OpenSSL 的包含目录
set(OPENSSL_INCLUDE_DIR "${OPENSSL_ROOT_DIR}/include")
# 指定 OpenSSL 的库目录
set(OPENSSL_LIBRARIES "${OPENSSL_ROOT_DIR}/lib")
find_package(OpenSSL REQUIRED)

# this method can find all sources files include the file generated by qt moc
# so the build directory must be outside the root directory(chatgpt-sidebar)

#file(GLOB_RECURSE HEAD_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.h)
#file(GLOB_RECURSE SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
#file(GLOB_RECURSE UI_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.ui)
#set(PROJECT_SOURCES ${HEAD_FILES} ${SOURCE_FILES} ${UI_FILES})

#aux_source_directory(utils/Proxy PROXY_SOURCES)
#aux_source_directory(utils/Ui/Layout LAYOUT_SOURCE)
#aux_source_directory(utils/AutoConfig AUTO_CONFIG_SOURCE)
#aux_source_directory(utils/AutoConfigQt AUTO_CONFIG_SOURCE_QT)
#aux_source_directory(ChatEngine/** ChatEngine_SOURCE)
file(GLOB_RECURSE ChatEngine_SOURCE "ChatEngine/**.cpp" "ChatEngine/**.h")
file(GLOB_RECURSE Util_SOURCE "utils/**.cpp" "utils/**.h")

set(PROJECT_SOURCES
    main.cpp
    clickablelabel.cpp
    mainwindow.cpp
    mainwindow.h
    mainwindow.ui
    linebar.h
    linebar.cpp
    linebar.ui
    DealChatGpt.cpp
    DealChatGpt.h
    utils/settingsdialog.ui
    utils/settingsdialog.h
    utils/settingsdialog.cpp
    utils/PubSub.cpp
    utils/PubSub.h
    buttonsettingborad.h
    buttonsettingborad.cpp
    interface/SettingInterface.cpp
    interface/SettingInterface.h
    interface/ChatInterface.cpp
    interface/ChatInterface.h
    interface/GetTextInterface.cpp
    interface/GetTextInterface.h
    Base/ChatgptBase.cpp
    Base/ChatgptBase.h
        ${Util_SOURCE}
        ${ChatEngine_SOURCE}
        TestFunc.cpp
    qrc.qrc
)


if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(chatgpt-sidebar
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
            utils/logs.cpp utils/logs.h utils/MySetting/KeyInfo/ZhipuKey.cpp utils/MySetting/KeyInfo/ZhipuKey.h)
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET chatgpt-sidebar APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(${PROJECT_NAME} SHARED
            ${PROJECT_SOURCES}
        )
    # Define properties for Android with Qt 5 after find_package() calls as:
    #    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
else()
    add_executable(${PROJECT_NAME}
        ${PROJECT_SOURCES}
            ChatEngine/ZhiPu/ZhiPuEngine.cpp ChatEngine/ZhiPu/ZhiPuEngine.h)
endif()
endif()
find_package(Qt6 COMPONENTS Network REQUIRED)
include(FetchContent)

FetchContent_Declare(json URL https://github.com/nlohmann/json/releases/download/v3.11.2/json.tar.xz)
FetchContent_MakeAvailable(json)
target_link_libraries(${PROJECT_NAME} PRIVATE OpenSSL::SSL OpenSSL::Crypto)

if(APPLE)
    target_link_libraries(${PROJECT_NAME} PRIVATE
                            Qt${QT_VERSION_MAJOR}::Widgets
                            Qt${QT_VERSION_MAJOR}::Network
                            nlohmann_json::nlohmann_json
                            ${CARBON_LIBRARY}
                            ${ApplicationServices_LIBRARY})
else()
    target_link_libraries(${PROJECT_NAME} PRIVATE
                            nlohmann_json::nlohmann_json
                            Qt${QT_VERSION_MAJOR}::Widgets
                            Qt${QT_VERSION_MAJOR}::Network)
endif()


set_target_properties(${PROJECT_NAME} PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER my.example.com
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

install(TARGETS ${PROJECT_NAME}
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(${PROJECT_NAME})
endif()
